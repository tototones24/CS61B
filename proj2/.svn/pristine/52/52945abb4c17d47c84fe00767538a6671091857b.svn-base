// This file contains a SUGGESTION for the structure of your program.  You
// may change any of it, or add additional files to this directory (package),
// as long as you conform to the project specification.

// Comments that start with "//" are intended to be removed from your
// solutions.
package jump61;

import java.util.ArrayList;

/** An automated Player.
 *  @author
 */
class AI extends Player {

    /** Time allotted to all but final search depth (milliseconds). */
    private static final long TIME_LIMIT = 15000;

    /** Number of calls to minmax between checks of elapsed time. */
    private static final long TIME_CHECK_INTERVAL = 10000;

    /** Number of milliseconds in one second. */
    private static final double MILLIS = 1000.0;

    /** A new player of GAME initially playing COLOR that chooses
     *  moves automatically.
     */
    AI(Game game, Side color) {
        super(game, color);
    }

    @Override
    void makeMove() {
        // FIXME
        ArrayList<Integer> movesDone = new ArrayList<Integer>();
        int cutOFF = Integer.MAX_VALUE;
        int d = 3;
        Game _game = getGame();
        Board board = getBoard();
        int movement = minmax(getSide(), board, d, cutOFF, movesDone);
        _game.makeMove(movement);
        _game.message("%s moves %d %d.%n", getSide().toCapitalizedString(),
               board.row(movement), board.col(movement));
    }

    /** Return the minimum of CUTOFF and the minmax value of board B
     *  (which must be mutable) for player P to a search depth of D
     *  (where D == 0 denotes statically evaluating just the next move).
     *  If MOVES is not null and CUTOFF is not exceeded, set MOVES to
     *  a list of all highest-scoring moves for P; clear it if
     *  non-null and CUTOFF is exceeded. the contents of B are
     *  invariant over this call. */
    private int minmax(Side p, Board b, int d, int cutoff,
                       ArrayList<Integer> moves) {
        // REPLACE WITH SOLUTION`
        //return 0;
        if (b.getWinner() == p) {
            return Integer.MAX_VALUE;
        } else if (b.getWinner() == p.opposite()) {
            return -Integer.MAX_VALUE;
        } else if (d == 0) {
            return staticEval(p, b);
        }
        if (p == getSide()) {

        }
        // int bestMove = -Integer.MAX_VALUE;
        // b.addSpot(, , )
        // for () {
        // }
        // for (int row = 1; row < board.size(); row++) {
        //     for (int col = 1; col < board.size(); col++) {
        //         if (is)
        //     }
        // }

        return 0;
    }
    
//   private ArrayList<Integer> possibleMoves (Player p, Board b, ArrayList<Integer> moves) {
//        for (int row = 1; row < b.size(); row++) {
//            for (int col = 1; col < b.size(); col++) {
//                if(isLegal(p, row, col)) {
//                    int rows = row(row);
//                    int cols = col(col);
//                    int validMove = sqNum(rows, cols);
//                    moves.add(validMove);
//                }
//            }
//        }
//        return moves;
//   }

    /** Returns heuristic value of board B for player P.
     *  Higher is better for P. */
    private int staticEval(Side p, Board b) {
        // REPLACE WITH SOLUTION
        return (b.numOfSide(p) - b.numOfSide(p.opposite()));
    }

}
