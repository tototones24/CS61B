package jump61;

import java.util.ArrayList;

/** An automated Player.
 *  @author Antonio Contreras
 */
class AI extends Player {

    /** Time allotted to all but final search depth (milliseconds). */
    private static final long TIME_LIMIT = 15000;

    /** Number of calls to minmax between checks of elapsed time. */
    private static final long TIME_CHECK_INTERVAL = 10000;

    /** Number of milliseconds in one second. */
    private static final double MILLIS = 1000.0;

    /** A new player of GAME initially playing COLOR that chooses
     *  moves automatically.
     */
    AI(Game game, Side color) {
        super(game, color);
    }

    @Override
    void makeMove() {
        //ArrayList<Integer> movesDone = new ArrayList<Integer>();
        int cutOFF = Integer.MAX_VALUE;
        ArrayList<Integer> listBestMoves = new ArrayList<Integer>();
        int d = 3;
        Game game = getGame();
        Board board = getBoard();
        int movement = minmax(getSide(), board, d, cutOFF, listBestMoves);
        if (listBestMoves.size() > 0) {
            if (getGame().getBoard().isLegal(getSide(), listBestMoves.get(0))) {
                game.makeMove(listBestMoves.get(0));
                game.reportMove(getSide(),
                    board.row(listBestMoves.get(0)), board.col(listBestMoves.get(0)));
            }
        }
    }

    /** Return the minimum of CUTOFF and the minmax value of board B
     *  (which must be mutable) for player P to a search depth of D
     *  (where D == 0 denotes statically evaluating just the next move).
     *  If MOVES is not null and CUTOFF is not exceeded, set MOVES to
     *  a list of all highest-scoring moves for P; clear it if
     *  non-null and CUTOFF is exceeded. the contents of B are
     *  invariant over this call. */
    private int minmax(Side p, Board b, int d, int cutoff,
                ArrayList<Integer> moves) {
        MutableBoard bord = new MutableBoard(b);
        int bestSoFar = -Integer.MAX_VALUE;
        int totalSize = b.size() * b.size();
        int val = 0;
        if (p.equals(b.getWinner())) {
            return Integer.MAX_VALUE;
        } else if (p.opposite().equals(b.getWinner())) {
            return -Integer.MAX_VALUE;
        } else if (d <= 0) {
            return staticEval(p, b);
        }
        for (int i = 0; i < totalSize; i += 1) {
            if (bord.isLegal(p, i)) {
                bord.addSpot(p, i);
                if (p.equals(bord.getWinner())) {
                    moves.add(i);
                    bord.undo();
                    return Integer.MAX_VALUE;
                } else {
                    val = minmax(p.opposite(), b, d - 1, cutoff, moves);
                    bord.undo();
                }
                if (-val >= bestSoFar) {
                    bestSoFar = val;
                    moves.add(i);
                } else if (-val > bestSoFar) {
                    moves.clear();
                }
                if (val >= cutoff) {
                    break;
                }
            }
        }
        return bestSoFar;
    }

    /**
     * an ArrayList with squares where a move can be made.
     * @param P
     * @param BOARD
     * @return ArrayList<Integer>
     */
    private ArrayList<Integer> possibleMoves(Side p, Board board) {
        ArrayList<Integer> listOfPossibities = new ArrayList<Integer>();
        for (int row = 1; row < board.size(); row++) {
            for (int col = 1; col < board.size(); col++) {
                if(board.isLegal(p, row, col)) {
                    int rows = board.row(row);
                    int cols = board.col(col);
                    int validMove = board.sqNum(rows, cols);
                    listOfPossibities.add(validMove);
                }
            }
        }
        return listOfPossibities;
    }

    /** Returns heuristic value of board B for player P.
     *  Higher is better for P. */
    private int staticEval(Side p, Board b) {
        return (b.numOfSide(p) - b.numOfSide(p.opposite()));
    }

}
