package graph;

import java.util.ArrayList;

/* See restrictions in Graph.java. */

/** Represents an undirected graph.  Out edges and in edges are not
 *  distinguished.  Likewise for successors and predecessors.
 *
 *  @author Antonio Contreras
 */
public class UndirectedGraph extends GraphObj {

    @Override
    public boolean isDirected() {
        return false;
    }

    @Override
    public int inDegree(int v) {
        int instances = 0;
        if (!adjList.containsKey(v)) {
            return 0;
        }
        for (Integer key : adjList.keySet()) {
            if (adjList.get(key).contains(v)) {
                instances += 1;
            }
        }
        return instances;
    }

    @Override
    public int predecessor(int v, int k) {
        if (!adjList.containsKey(v) || k > orderedPredKey.get(v).size() - 1) {
            return 0;
    	}
    	return orderedPredKey.get(v).get(k);
    }

    @Override
    public Iteration<Integer> predecessors(int v) {
    	return Iteration.iteration(adjList.get(v));
    }

    /** Holds all of the predecessors of the vertex v ! in order. */
    private ArrayList<Integer> noOrderPred;

    /** Hold all of the predecessors in order they were added. */
    private ArrayList<Integer> orderPred;

    /** Hold all of the edges in no particular order. */
    private ArrayList<int[]> noOrderEdges;

}
