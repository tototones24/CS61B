package graph;

/* See restrictions in Graph.java. */

import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.PriorityQueue;

/** The shortest paths through an edge-weighted graph.
 *  By overrriding methods getWeight, setWeight, getPredecessor, and
 *  setPredecessor, the client can determine how to represent the weighting
 *  and the search results.  By overriding estimatedDistance, clients
 *  can search for paths to specific destinations using A* search.
 *  @author Antonio Contreras
 */
public abstract class ShortestPaths {

    class SPComparator<T> implements Comparator<T> {
        @Override
        public int compare(T o1, T o2) {
            double weightOne = weightData.get((Integer) o1) + estimatedDistance((Integer)o1);
            double weightTwo = weightData.get((Integer) o2) + estimatedDistance((Integer)o2);
            if (weightOne < weightTwo) {
                return -1;
            }
            if (weightOne > weightTwo) {
                return 1;
            }
            if (weightOne == weightTwo) {
                return 0;
            }
            return 0;
        }
    }

    /** The shortest paths in G from SOURCE. */
    public ShortestPaths(Graph G, int source) {
        this(G, source, 0);
    }

    /** A shortest path in G from SOURCE to DEST. */
    public ShortestPaths(Graph G, int source, int dest) {
        _G = G;
        _source = source;
        _dest = dest;
        weightData = new HashMap<Integer, Double>();
        prevVertex = new HashMap<Integer, Integer>();
        fringe = new PriorityQueue<Integer>();
    }

    /** Initialize the shortest paths.  Must be called before using
     *  getWeight, getPredecessor, and pathTo. */
    public void setPaths() {
        // FIXME
        fringe = new PriorityQueue<Integer>(_G.vertexSize(), new SPComparator<Integer>());
        fastestPath = new ArrayList<Integer>();
        for (int vert : _G.vertices()) {
            weightData.put(vert, Double.POSITIVE_INFINITY);
            prevVertex.put(vert, 0);
            fringe.add(vert);
        }
        weightData.put(_source, 0.0); //added to pathTo
        while (!fringe.isEmpty()) {
            int vertex = fringe.poll(); //had poll()
            for (Integer w : _G.successors(vertex)) {
                if ((weightData.get(vertex) + getWeight(vertex, w) < weightData.get(w))) {
                    weightData.put(w, (weightData.get(vertex) + getWeight(vertex, w)));
                    prevVertex.put(w, vertex);
                }
            }
        }
    }

    /** Returns the starting vertex. */
    public int getSource() {
        return _source;
    }

    /** Returns the target vertex, or 0 if there is none. */
    public int getDest() {
        return _dest;
    }

    /** Returns the current weight of vertex V in the graph.  If V is
     *  not in the graph, returns positive infinity. */
    public abstract double getWeight(int v);

    /** Set getWeight(V) to W. Assumes V is in the graph. */
    protected abstract void setWeight(int v, double w);

    /** Returns the current predecessor vertex of vertex V in the graph, or 0 if
     *  V is not in the graph or has no predecessor. */
    public abstract int getPredecessor(int v);

    /** Set getPredecessor(V) to U. */
    protected abstract void setPredecessor(int v, int u);

    /** Returns an estimated heuristic weight of the shortest path from vertex
     *  V to the destination vertex (if any).  This is assumed to be less
     *  than the actual weight, and is 0 by default. */
    protected double estimatedDistance(int v) {
        return 0.0;
    }

    /** Returns the current weight of edge (U, V) in the graph.  If (U, V) is
     *  not in the graph, returns positive infinity. */
    protected abstract double getWeight(int u, int v);

    /** Returns a list of vertices starting at _source and ending
     *  at V that represents a shortest path to V.  Invalid if there is a
     *  destination vertex other than V. */
    public List<Integer> pathTo(int v) {
        fastestPath.add(0, v);
        int current = v;
        while (prevVertex.get(current) != _source) {
            fastestPath.add(0, prevVertex.get(current));
            current = prevVertex.get(current);
        }
        fastestPath.add(0, _source);
        return fastestPath;
    }

    /** Returns a list of vertices starting at the source and ending at the
     *  destination vertex. Invalid if the destination is not specified. */
    public List<Integer> pathTo() {
        return pathTo(getDest());
    }

    /** The graph being searched. */
    protected final Graph _G;
    /** The starting vertex. */
    private final int _source;
    /** The target vertex. */
    private final int _dest;

    /** Will represents the fringe for pathTo. */
    PriorityQueue<Integer> fringe;

    /** Will contain the inputed weights according to the vertex. */
    protected HashMap<Integer, Double> weightData;

    /** Will be used to keep track of the previous vertex.
     *  It gets updated in pathTo. */
    protected HashMap<Integer, Integer> prevVertex;

    /** Will contain the final list containing the shortest path. */
    protected List<Integer> fastestPath;

    /** Will contain all of the weights according to the v. */
    HashMap<Integer, Double> simpleWeightData;

    /** Will contain the predecessor data. */
    HashMap<Integer, Integer> simplePredData;

}
