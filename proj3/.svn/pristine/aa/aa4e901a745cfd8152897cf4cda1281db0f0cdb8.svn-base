package graph;

import java.util.ArrayList;
import java.util.HashMap;

/* See restrictions in Graph.java. */

/** A partial implementation of ShortestPaths that contains the weights of
 *  the vertices and the predecessor edges.   The client needs to
 *  supply only the two-argument getWeight method.
 *  @author Antonio Contreras
 */
public abstract class SimpleShortestPaths extends ShortestPaths {

    /** The shortest paths in G from SOURCE. */
    public SimpleShortestPaths(Graph G, int source) {
        this(G, source, 0);
    }

    /** A shortest path in G from SOURCE to DEST. */
    public SimpleShortestPaths(Graph G, int source, int dest) {
        super(G, source, dest);
    }

    @Override
    public double getWeight(int v) {
        // FIXME
    	return weightData.get(v);
    }

    @Override
    protected void setWeight(int v, double w) {
        // FIXME
    	if (!weightData.containsKey(v)) {
    		weightData.put(v, w);
    	} else {
    	    weightData.put(v, w);
    	}
    }

    @Override
    public int getPredecessor(int v) {
        //fix me
    	return _G.predecessor(v, 0);
    }

    @Override
    protected void setPredecessor(int v, int u) {
    	int predHistory = _G.predecessor(u, 0);
    	if (_G.predecessor(u, 0) != 0) {
    		_G.remove(_G.predecessor(u, 0), u);
    	}
    	_G.add(predHistory, u);
    }

    // FIXME Implemeented my maps in the shortestPaths
    

}
